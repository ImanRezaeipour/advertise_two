@* Generator: MvcView GeneratePrettyNames: true *@
@using Advertise.Core.Types
@model IEnumerable<Advertise.Core.Models.CatalogSpecification.CatalogSpecificationViewModel>
@{
    var indexItem = 0;
    foreach (var productSpecification in Model)
    {
        switch (productSpecification.Type)
        {
            case SpecificationType.Droplist:
                <div class="input-container">
                    <label class="rl-label right-placed-label">@productSpecification.Title</label>
                    <select name="Specifications[@indexItem].SpecificationOptionIdList" class="left-placed-input">
                        <option value="">-- @Admin.Choose --</option>
                        @foreach (var option in productSpecification.Options)
                        {
                            <option value="@option.Id" @if (productSpecification.SpecificationOptionIdList.Contains(option.Id)) { <text> selected</text>}>@option.Title</option>
                        }
                    </select>
                </div>
                break;

            case SpecificationType.String:
                <div class="input-container">
                    <label class="rl-label right-placed-label">@productSpecification.Title</label>
                    <input type="text" name="Specifications[@indexItem].Value" value="@productSpecification.Value" class="left-placed-input"/>
                </div>
                break;

            case SpecificationType.Checkbox:
                <div class="input-container">
                    <label class="rl-label">@productSpecification.Title</label>
                    @{
                        var indexCheckbox = 0;
                        foreach (var option in productSpecification.Options)
                        {
                            <div class="checkbox-inline">
                                <label class="rl-label">
                                    <input type="hidden" name="Specifications[@indexItem].SpecificationOptionIdList.Index" value="@indexCheckbox">
                                    <input type="checkbox" name="Specifications[@indexItem].SpecificationOptionIdList[@indexCheckbox]" value="@option.Id" @if (productSpecification.SpecificationOptionIdList.Contains(option.Id)) { <text> checked</text>} />
                                    <span>@option.Title</span>
                                </label>
                            </div>
                            indexCheckbox = indexCheckbox + 1;
                        }
                    }
                </div>
                break;

            case SpecificationType.Color:
                break;

            case SpecificationType.Radiobox:
                <div class="input-container">
                    <label class="rl-label">@productSpecification.Title</label>
                    @{
                        var indexRadiobox = 0;
                        foreach (var option in productSpecification.Options)
                        {
                            <div class="checkbox-inline">
                                <label class="rl-label">
                                    <input type="radio" name="Specifications[@indexItem].SpecificationOptionIdList" value="@option.Id" @if (productSpecification.SpecificationOptionIdList.Contains(option.Id)) { <text> checked</text>} />
                                    <span>@option.Title</span>
                                </label>
                            </div>
                            indexRadiobox = indexRadiobox + 1;
                        }
                    }
                </div>
                break;

            case SpecificationType.Currency:
                break;
        }
        <input type="hidden" name="Specifications[@indexItem].Id" value="@productSpecification.Id" />
        <hr class="line-separator" />
        indexItem = indexItem + 1;
    }
}